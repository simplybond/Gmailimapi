import TelegramBot from 'node-telegram-bot-api';
import Imap from 'imap';
import { simpleParser } from 'mailparser';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ Yandex
const mailbox = {
    name: "your_yandex_name@yandex.ru",
    email: process.env.YANDEX_EMAIL,
    password: process.env.YANDEX_PASSWORD,
    host: 'imap.yandex.ru',
    port: 993,
    emoji: 'üî¥'
};

const botToken = process.env.TELEGRAM_BOT_TOKEN;

if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    process.exit(1);
}

if (!mailbox.email || !mailbox.password) {
    console.error(`–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${mailbox.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
    process.exit(1);
}

const bot = new TelegramBot(botToken, { polling: true });

async function checkUnreadEmails(chatId) {
    const imap = new Imap({
        user: mailbox.email,
        password: mailbox.password,
        host: mailbox.host,
        port: mailbox.port,
        tls: true,
    });

    imap.once('ready', () => {
        console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP –¥–ª—è ${mailbox.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
        imap.openBox('INBOX', true, (err, box) => {
            if (err) handleError(err, chatId);
            imap.search(['UNSEEN'], (err, results) => {
                if (err) handleError(err, chatId);

                if (results.length === 0) {
                    bot.sendMessage(chatId, `–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);
                    imap.end();
                    return;
                }

                bot.sendMessage(chatId, `${results.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);

                const f = imap.fetch(results, { bodies: '', struct: true, markSeen: false, uid: true });

                f.on('message', (msg, seqno) => {
                    let uid;
                    msg.on('attributes', (attrs) => { uid = attrs.uid; });
                    msg.on('body', (stream) => {
                        simpleParser(stream, (err, mail) => {
                            if (err) handleError(err, chatId);
                            const deleteButton = { reply_markup: { inline_keyboard: [[{ text: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è', callback_data: `delete_${uid}` }]] } };
                            bot.sendMessage(chatId, `${mailbox.emoji} **–û—Ç:** ${mail.from.text}\n**–¢–µ–º–∞:** ${mail.subject}\n**–î–∞—Ç–∞:** ${mail.date}`, deleteButton);
                        });
                    });
                });

                f.once('error', (err) => handleError(err, chatId));
                f.once('end', () => imap.end());
            });
        });
    });

    imap.once('error', (err) => {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –¥–ª—è ${mailbox.name}:`, err);
      handleError(err, chatId);
    });

    imap.connect();
}

function handleError(err, chatId) {
    console.error(`–û—à–∏–±–∫–∞ –≤ ${mailbox.name}:`, err);
    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤ ${mailbox.name}: ${err.message}`);
}

bot.onText(/\/start/, async (msg) => { await checkUnreadEmails(msg.chat.id); });
bot.onText(/\/help/, async (msg) => { await bot.sendMessage(msg.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞'); });

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    if (data.startsWith('delete_')) {
        const uid = data.split('_')[1];
        console.log(`–ü–æ–ª—É—á–µ–Ω UID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${uid}`);
        
        const imap = new Imap({ ...mailbox, tls: true });
        
        imap.once('ready', () => {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"...`);
            imap.openBox('[–£–¥–∞–ª–µ–Ω–Ω—ã–µ]', false, (err) => {
                if (err) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É "–£–¥–∞–ª–µ–Ω–Ω—ã–µ":`, err);
                    return handleError(err, chatId);
                }
                
                console.log(`–ü–∞–ø–∫–∞ "–£–¥–∞–ª–µ–Ω–Ω—ã–µ" —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞.`);

                // –ö–æ–ø–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ –≤ –ø–∞–ø–∫—É "–£–¥–∞–ª–µ–Ω–Ω—ã–µ"
                imap.copy(uid, '[–£–¥–∞–ª–µ–Ω–Ω—ã–µ]', (err) => {
                    if (err) return handleError(err, chatId);
                    console.log(`–ü–∏—Å—å–º–æ —Å UID ${uid} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø–∞–ø–∫—É "–£–¥–∞–ª–µ–Ω–Ω—ã–µ".`);

                    // –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                    imap.store(uid, '+FLAGS', '\\Deleted', (err) => {
                        if (err) return handleError(err, chatId);
                        console.log(`–ü–∏—Å—å–º–æ —Å UID ${uid} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ.`);

                        // –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                        imap.expunge((err) => {
                            if (err) return handleError(err, chatId);
                            bot.sendMessage(chatId, `–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ ${mailbox.name}.`);
                            imap.end();
                        });
                    });
                });
            });
        });

        imap.once('error', (err) => {
            console.error(`–û—à–∏–±–∫–∞ IMAP –≤ callback_query –¥–ª—è ${mailbox.name}:`, err);
            handleError(err, chatId);
        });

        imap.connect();
        await bot.answerCallbackQuery(query.id);
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');


