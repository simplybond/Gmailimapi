
import TelegramBot from 'node-telegram-bot-api';
import Imap from 'imap';
import { simpleParser } from 'mailparser';

const mailbox = {
    name: "your_yandex_name@yandex.ru",
    email: process.env.YANDEX_EMAIL,
    password: process.env.YANDEX_PASSWORD,
    host: 'imap.yandex.ru',
    port: 993,
    emoji: 'üî¥' 
};

const botToken = process.env.TELEGRAM_BOT_TOKEN;

if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    process.exit(1);
}

if (!mailbox.email || !mailbox.password) {
    console.error(`–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${mailbox.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
    process.exit(1);
}

const bot = new TelegramBot(botToken, { polling: true });

async function checkUnreadEmails(chatId) {
    console.log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.');

    const imap = new Imap({
        user: mailbox.email,
        password: mailbox.password,
        host: mailbox.host,
        port: mailbox.port,
        tls: true,
    });

    imap.once('ready', () => {
        console.log('IMAP –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
        imap.openBox('INBOX', true, (err, box) => {
            if (err) {
                handleError(err, chatId);
                return;
            }
            console.log('–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ—á—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ INBOX.');

            imap.search(['UNSEEN'], (err, results) => {
                if (err) {
                    handleError(err, chatId);
                    return;
                }
                console.log(`–ù–∞–π–¥–µ–Ω–æ ${results.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.`);

                if (results.length === 0) {
                    bot.sendMessage(chatId, `–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);
                    imap.end();
                    return;
                }

                bot.sendMessage(chatId, `${results.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);

                const f = imap.fetch(results, { bodies: '', struct: true, markSeen: false, uid: true });
                f.on('message', (msg, seqno) => {
                    let uid;
                    msg.on('attributes', (attrs) => {
                        uid = attrs.uid;
                        console.log(`–ü–æ–ª—É—á–µ–Ω UID: ${uid}`);
                    });

                    msg.on('body', (stream) => {
                        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
                        simpleParser(stream, (err, mail) => {
                            if (err) {
                                handleError(err, chatId);
                                return;
                            }
                            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ.');

                            const deleteButton = { reply_markup: { inline_keyboard: [[{ text: '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', callback_data: `delete_${uid}` }]] } };
                            bot.sendMessage(chatId, `${mailbox.emoji} **–û—Ç:** ${mail.from.text}\n**–¢–µ–º–∞:** ${mail.subject}\n**–î–∞—Ç–∞:** ${mail.date}`, deleteButton)
                                .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.'))
                                .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
                        });
                    });
                });

                f.once('error', (err) => {
                    handleError(err, chatId);
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
                });

                f.once('end', () => {
                    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
                    imap.end();
                });
            });
        });
    });

    imap.once('error', (err) => {
        handleError(err, chatId);
        console.error('–û—à–∏–±–∫–∞ IMAP:', err);
    });

    imap.connect();
}

function handleError(err, chatId) {
    console.error(`–û—à–∏–±–∫–∞ –≤ ${mailbox.name}:`, err);
    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤ ${mailbox.name}: ${err.message}`)
        .catch((sendErr) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendErr));
}

bot.onText(/\/start/, async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start.');
    await checkUnreadEmails(msg.chat.id);
});

bot.onText(/\/help/, async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help.');
    await bot.sendMessage(msg.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞')
        .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–º–æ—â–∏:', err));
});

bot.on('callback_query', async (query) => {
    console.log('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å.');
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('delete_')) {
        const uid = data.split('_')[1];
        console.log(`UID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${uid}`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞.');

        const imap = new Imap({
            user: mailbox.email,
            password: mailbox.password,
            host: mailbox.host,
            port: mailbox.port,
            tls: true,
        });

        imap.once('ready', () => {
            console.log('IMAP –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞.');
            imap.openBox('INBOX', false, (err) => {
                if (err) {
                    handleError(err, chatId);
                    return;
                }
                console.log('–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ—á—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ INBOX –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');

                imap.addFlags([uid], '\\Deleted', (err) => {
                    if (err) {
                        handleError(err, chatId);
                        return;
                    }
                    console.log('–§–ª–∞–≥ \\Deleted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');

                    imap.expunge((err) => {
                        if (err) {
                            handleError(err, chatId);
                            return;
                        }
                        console.log('–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞.');
                        bot.sendMessage(chatId, `–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ ${mailbox.name}.`)
                            .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:', err));

                        imap.end();
                    });
                });
            });
        });

        imap.once('error', (err) => {
            handleError(err, chatId);
            console.error('–û—à–∏–±–∫–∞ IMAP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
        });

        imap.connect();

        await bot.answerCallbackQuery(query.id)
            .then(() => console.log('Callback –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.'))
            .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –∑–∞–ø—Ä–æ—Å:', err));
    } else {
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ callback –∑–∞–ø—Ä–æ—Å–µ.');
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg);
});
