

import TelegramBot from 'node-telegram-bot-api';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import dotenv from 'dotenv';

dotenv.config();

// Telegram Bot Token
const botToken = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(botToken, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
const email = process.env.GMAIL_EMAIL;
const password = process.env.GMAIL_APP_PASSWORD;
const imapHost = process.env.IMAP_HOST || 'imap.gmail.com';
const imapPort = parseInt(process.env.IMAP_PORT || '993', 10);

if (!email || !password || !botToken) {
    console.error('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç.');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
async function checkUnreadEmails(chatId) {
    const imap = new Imap({
        user: email,
        password: password,
        host: imapHost,
        port: imapPort,
        tls: true,
    });

   try {
      console.log("checkUnreadEmails: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP...");
    
     await new Promise((resolve, reject) => {
            imap.once('ready', resolve);
            imap.once('error', reject);
            imap.connect();
     });
     console.log("checkUnreadEmails: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP.");
    
    const box = await new Promise((resolve, reject) => {
       imap.openBox('INBOX', true, (err, box) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞: ${err.message}`));
                } else {
                    resolve(box);
                }
       });
    });
     console.log("checkUnreadEmails: –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –æ—Ç–∫—Ä—ã—Ç.");
    
    const searchResults = await new Promise((resolve, reject) => {
         imap.search(['UNSEEN'], (err, results) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º: ${err.message}`));
                } else {
                    resolve(results);
                }
         });
      });
       console.log(`checkUnreadEmails: –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.`);

        if (searchResults.length === 0) {
            bot.sendMessage(chatId, '–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º.');
             imap.end();
            return;
        }

        bot.sendMessage(chatId, `–ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.`);

        const fetch = imap.fetch(searchResults, { bodies: '', struct: true, uid: true });
        fetch.on('message', async (msg, seqno) => {
            try {
                 console.log(`checkUnreadEmails: –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ #${seqno}.`);
               const attributes = await new Promise((resolve) => {
                   msg.on('attributes', (attrs) => resolve(attrs));
               });
               console.log(`checkUnreadEmails: –ê—Ç—Ä–∏–±—É—Ç—ã –ø–∏—Å—å–º–∞ #${seqno} –ø–æ–ª—É—á–µ–Ω—ã.`);

                const parsedMail = await new Promise((resolve, reject) => {
                     msg.on('body', (stream) => {
                        simpleParser(stream, {}, (err, mail) => {
                            if (err) {
                                reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: ${err.message}`));
                            } else {
                                resolve(mail);
                            }
                        });
                    });
                 });
                 console.log(`checkUnreadEmails: –ü–∏—Å—å–º–æ #${seqno} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ.`);

               const emailInfo = `
                **–û—Ç:** ${parsedMail.from.text}
                **–¢–µ–º–∞:** ${parsedMail.subject}
                **–î–∞—Ç–∞:** ${parsedMail.date}
                `;

               const deleteButton = {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', callback_data: `delete_${attributes.uid}` }
                        ]],
                    },
                };

                bot.sendMessage(chatId, emailInfo, deleteButton);
                 console.log(`checkUnreadEmails: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Å—å–º–µ #${seqno} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
            } catch (parseError) {
                console.error(`checkUnreadEmails: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞ #${seqno}:`, parseError);
            }
        });

        await new Promise((resolve, reject) => {
            fetch.once('error', reject);
            fetch.once('end', resolve);
        });
           console.log('checkUnreadEmails: –í—Å–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—É—á–µ–Ω—ã.');
           imap.end();
    } catch (error) {
         console.error('checkUnreadEmails: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
        bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
        imap.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞
async function deleteEmail(chatId, uid) {
   const imap = new Imap({
      user: email,
      password: password,
      host: imapHost,
      port: imapPort,
      tls: true,
   });

  try {
      console.log("deleteEmail: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP...");

        await new Promise((resolve, reject) => {
            imap.once('ready', resolve);
            imap.once('error', reject);
            imap.connect();
        });
      console.log("deleteEmail: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP.");
     
        await new Promise((resolve, reject) => {
            imap.openBox('INBOX', false, (err, box) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${err.message}`));
                } else {
                    resolve(box);
                }
            });
        });
         console.log("deleteEmail: –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");

        await new Promise((resolve, reject) => {
            imap.addFlags(uid, '\\Deleted', (err) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${err.message}`));
                } else {
                    resolve();
                }
            });
        });
        console.log(`deleteEmail: –§–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∏—Å—å–º—É —Å UID ${uid}.`);

        await new Promise((resolve, reject) => {
            imap.expunge((err) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞: ${err.message}`));
                } else {
                    console.log(`deleteEmail: –ü–∏—Å—å–º–æ —Å UID ${uid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`);
                    bot.sendMessage(chatId, `–ü–∏—Å—å–º–æ —Å UID ${uid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`);
                    resolve();
                }
            });
        });

        imap.end();
          console.log('deleteEmail: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    } catch (error) {
      console.error('deleteEmail: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞:', error);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞: ${error.message}`);
        imap.end();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
bot.onText(/\/checkEmails/, (msg) => {
     console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /checkEmails:", msg);
    const chatId = msg.chat.id;
    checkUnreadEmails(chatId);
});

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
     console.log("–ü–æ–ª—É—á–µ–Ω callback query:", query);
    const data = query.data;

    if (data.startsWith('delete_')) {
        const uid = data.split('_')[1];
          console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ —Å UID ${uid}.`);
        deleteEmail(chatId, uid);
        bot.answerCallbackQuery(query.id);
    }
});

bot.on('message', (msg) => {
    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg); // Log all incoming messages
});

console.log('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
