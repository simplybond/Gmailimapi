import TelegramBot from 'node-telegram-bot-api';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import dotenv from 'dotenv';

dotenv.config();

// Telegram Bot Token
const botToken = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(botToken, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
const email = process.env.YANDEX_USER;
const password = process.env.YANDEX_APP_PASSWORD;
const imapHost = process.env.IMAP_HOST || 'imap.mail.yandex.ru';
const imapPort = parseInt(process.env.IMAP_PORT || '993', 10);

// –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!email || !password || !botToken || !imapHost || !imapPort) {
  console.error('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
  process.exit(1);
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');


async function checkUnreadEmails(chatId) {
    const imap = new Imap({ user: email, password: password, host: imapHost, port: imapPort, tls: true });

  try {
      await imap.connect();
      try {
          await imap.openBox('INBOX', true);
      } catch (openBoxError) {
          handleError(openBoxError, chatId, bot, '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞');
          return;
      }


      const searchCriteria = ['UNSEEN', 'NOT DELETED'];  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–∞ —É—Å–ª–æ–≤–∏—è
      const searchResults = await imap.search(searchCriteria);

      if (searchResults.length === 0) {
          bot.sendMessage(chatId, '–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º.');
          return;
      }

      bot.sendMessage(chatId, `–ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.`);

      for (const seqno of searchResults) {
          const fetch = imap.fetch(seqno, { bodies: '', struct: true, uid: true });
          for await (const message of fetch) {
              try {
                  const attributes = message.attributes;
                  const parsedMail = await new Promise((resolve, reject) => {
                      message.body.pipe(simpleParser({}, (err, mail) => err ? reject(err) : resolve(mail)));
                  });

                  const emailInfo = `
                      **–û—Ç:** ${parsedMail.from?.address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      **–¢–µ–º–∞:** ${parsedMail.subject || '–ë–µ–∑ —Ç–µ–º—ã'}
                      **–î–∞—Ç–∞:** ${parsedMail.date ? parsedMail.date.toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                  `;

                  const deleteButton = {
                      reply_markup: {
                          inline_keyboard: [[
                              { text: '–£–¥–∞–ª–∏—Ç—å üóëÔ∏è', callback_data: `delete_${attributes.uid}` }
                          ]]
                      }
                  };

                  bot.sendMessage(chatId, emailInfo, deleteButton);

              } catch (parseError) {
                  handleError(parseError, chatId, bot, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞');
              }
          }
      }
  } catch (connectError) {
    handleError(connectError, chatId, bot, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');
  } finally {
      imap.end();
  }
}




function handleError(error, chatId, bot, msgText = '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞') {
    console.error('–û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${msgText}`);
}




bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});


bot.onText(/\/checkEmails/, (msg) => {
    const chatId = msg.chat.id;
    checkUnreadEmails(chatId);
});



bot.on('callback_query', async (query) => {
    try {
        const chatId = query.message.chat.id;
        const data = query.data;
        if (data.startsWith('delete_')) {
            const uid = data.split('_')[1];
            const imap = new Imap({ user: email, password: password, host: imapHost, port: imapPort, tls: true });

            await imap.connect();
            await imap.openBox('INBOX', true);
            await imap.addFlags(uid, '\\Deleted');
            await imap.expunge();
            imap.end();


            bot.answerCallbackQuery(query.id);
            bot.sendMessage(chatId, `–ü–∏—Å—å–º–æ —É–¥–∞–ª–µ–Ω–æ.`);
        }
    } catch (error) {
        handleError(error, chatId, bot, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞');
    }
});

